{"mappings":"AC0HA,SAAS,gBAAgB,CAAC,mBAAoB,KAxH5C,IAAI,EADJ,QAAQ,GAAG,CAAC,yBAGZ,CAFI,EAAK,KAAK,UAAU,IAErB,GAAG,CACJ,CACE,MAAO,qBACP,MAAO,oBACT,EACA,AAAC,IACK,EAAI,UAAU,CAAC,KAAK,EACtB,AAKN,SAA4B,CAAY,CAAE,CAAQ,EAChD,QAAQ,GAAG,CAAC,qBAAsB,EAAc,GAChD,IAAM,EAAqB,SAAS,gBAAgB,CAClD,yBAEI,EAAiB,SAAS,aAAa,CAAC,GAEzC,GAAuB,GAI5B,EAAmB,OAAO,CAAC,CAAC,EAAS,KACnC,QAAQ,GAAG,CAAC,EAAgB,EAAe,gBAAgB,CAAC,MAAM,CAAC,EAAE,EACrE,IAAM,EAAQ,EAAe,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAEvD,GAAI,EAAU,CAGZ,KAAK,GAAG,CAAC,EAAO,CAAE,QAAS,EAAG,MAAO,GAAI,GAGzC,IAAM,EAAS,KAAK,QAAQ,CAAC,CAC3B,OAAQ,CAAA,CACV,GAEA,EAAO,EAAE,CAAC,EAAO,CACf,QAAS,EACT,MAAO,EACP,SAAU,EACV,KAAM,YACR,GAEA,KAAK,QAAQ,CAAC,CACZ,cAAe,CACb,QAAS,EACT,MAAO,UACP,IAAK,aAEL,KAAM,CAAA,EACN,QAAS,KACP,EAAO,IAAI,EACb,CACF,CACF,EACF,KAAO,CAEL,IAAM,EAAU,AAAM,IAAN,CACK,CAAA,EAAmB,MAAM,CAEzC,GACH,KAAK,GAAG,CAAC,EAAO,CAAE,QAAS,EAAG,MAAO,GAAI,GAI3C,IAAM,EAAS,KAAK,QAAQ,CAAC,CAC3B,OAAQ,CAAA,CACV,GAEA,EAAO,EAAE,CAAC,EAAO,CACf,QAAS,EACT,MAAO,EACP,SAAU,EACV,KAAM,YACR,GAEkB,KAAK,QAAQ,CAAC,CAC9B,cAAe,CACb,QAAS,EACT,MAAO,UACP,IAAK,aACL,MAAO,CAAA,EAEP,cAAe,IACf,gBAAiB,eACjB,QAAS,KACF,GACH,EAAO,IAAI,EAEf,EAWA,YAAa,KACN,GACH,EAAO,QAAQ,CAAC,GAAG,OAAO,EAE9B,CACF,CACF,EACF,CACF,EACF,EAvGyB,sBAAuB,CAAA,EAE9C,GAwGF,EAAG,GAAG,CAAC,IAAK,KACV,EAAG,MAAM,EACX,EAKF","sources":["<anon>","src/howItWorks.js"],"sourcesContent":["(() => {\nfunction $a240d6523b3715e5$var$setHowItWorksSections() {\n    console.log(\"setHowItWorksSections\");\n    let mm = gsap.matchMedia(); // Create a matchMedia instance\n    mm.add({\n        small: '(max-width: 991px)',\n        large: '(min-width: 992px)'\n    }, (ctx)=>{\n        if (ctx.conditions.large) initializeSections(\".image-mask_desktop\", false);\n    });\n    function initializeSections(maskSelector, isMobile) {\n        console.log(\"initializeSections\", maskSelector, isMobile);\n        const howItWorksSections = document.querySelectorAll(\".how-it-works_section\");\n        const howItWorksMask = document.querySelector(maskSelector);\n        if (!howItWorksSections || !howItWorksMask) return;\n        howItWorksSections.forEach((section, i)=>{\n            console.log(howItWorksMask, howItWorksMask.querySelectorAll(\"img\")[i]);\n            const image = howItWorksMask.querySelectorAll(\"img\")[i];\n            if (isMobile) {\n                // Mobile: Only trigger onEnter and only once\n                // Initial setup for paths\n                gsap.set(image, {\n                    opacity: 0,\n                    scale: 1.1\n                });\n                // Timeline for mask animation\n                const maskTl = gsap.timeline({\n                    paused: true\n                });\n                maskTl.to(image, {\n                    opacity: 1,\n                    scale: 1,\n                    duration: 1,\n                    ease: \"expo.inOut\"\n                });\n                gsap.timeline({\n                    scrollTrigger: {\n                        trigger: section,\n                        start: \"top 60%\",\n                        end: \"bottom 60%\",\n                        // markers: true,\n                        once: true,\n                        onEnter: ()=>{\n                            maskTl.play();\n                        }\n                    }\n                });\n            } else {\n                // Desktop: Full ScrollTrigger behavior\n                const isFirst = i === 0;\n                const isLast = i === howItWorksSections.length - 1;\n                if (!isFirst) gsap.set(image, {\n                    opacity: 0,\n                    scale: 1.1\n                });\n                // Timeline for mask animation\n                const maskTl = gsap.timeline({\n                    paused: true\n                });\n                maskTl.to(image, {\n                    opacity: 1,\n                    scale: 1,\n                    duration: 1,\n                    ease: \"expo.inOut\"\n                });\n                const sectionTl = gsap.timeline({\n                    scrollTrigger: {\n                        trigger: section,\n                        start: \"top 60%\",\n                        end: \"bottom 60%\",\n                        scrub: true,\n                        // markers: true,\n                        fastScrollEnd: 500,\n                        preventOverlaps: \"how-it-works\",\n                        onEnter: ()=>{\n                            if (!isFirst) maskTl.play();\n                        },\n                        // onEnterBack: () => {\n                        //   if (!isLast) {\n                        //     maskTl.progress(1).reverse();\n                        //   }\n                        // },\n                        // onLeave: () => {\n                        //   if (!isLast) {\n                        //     maskTl.seek(\"out\").play();\n                        //   }\n                        // },\n                        onLeaveBack: ()=>{\n                            if (!isFirst) maskTl.progress(1).reverse();\n                        }\n                    }\n                });\n            }\n        });\n    }\n    // Cleanup and reinitialize logic on breakpoint change\n    mm.add(\"*\", ()=>{\n        mm.revert(); // Clean up GSAP timelines and ScrollTriggers before reinitializing\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    $a240d6523b3715e5$var$setHowItWorksSections();\n});\n\n})();\n//# sourceMappingURL=howItWorks.js.map\n","function setHowItWorksSections() {\n  console.log(\"setHowItWorksSections\");\n  let mm = gsap.matchMedia(); // Create a matchMedia instance\n\n  mm.add(\n    {\n      small: '(max-width: 991px)',\n      large: '(min-width: 992px)',\n    },\n    (ctx) => {  \n      if (ctx.conditions.large){\n        initializeSections(\".image-mask_desktop\", false);\n      }\n    }\n  );\n\n  function initializeSections(maskSelector, isMobile) {\n    console.log(\"initializeSections\", maskSelector, isMobile);\n    const howItWorksSections = document.querySelectorAll(\n      \".how-it-works_section\"\n    );\n    const howItWorksMask = document.querySelector(maskSelector);\n\n    if (!howItWorksSections || !howItWorksMask) {\n      return;\n    }\n\n    howItWorksSections.forEach((section, i) => {  \n      console.log(howItWorksMask, howItWorksMask.querySelectorAll(\"img\")[i]);\n      const image = howItWorksMask.querySelectorAll(\"img\")[i];\n\n      if (isMobile) {\n        // Mobile: Only trigger onEnter and only once\n        // Initial setup for paths\n        gsap.set(image, { opacity: 0, scale: 1.1 });\n\n        // Timeline for mask animation\n        const maskTl = gsap.timeline({\n          paused: true,\n        });\n\n        maskTl.to(image, {\n          opacity: 1,\n          scale: 1,\n          duration: 1,\n          ease: \"expo.inOut\",\n        });\n\n        gsap.timeline({\n          scrollTrigger: {\n            trigger: section,\n            start: \"top 60%\",\n            end: \"bottom 60%\",\n            // markers: true,\n            once: true, // Ensure it only runs once\n            onEnter: () => {\n              maskTl.play();\n            },\n          },\n        });\n      } else {\n        // Desktop: Full ScrollTrigger behavior\n        const isFirst = i === 0;\n        const isLast = i === howItWorksSections.length - 1;\n\n        if (!isFirst) {\n          gsap.set(image, { opacity: 0, scale: 1.1 });\n        }\n\n        // Timeline for mask animation\n        const maskTl = gsap.timeline({\n          paused: true,\n        });\n\n        maskTl.to(image, {\n          opacity: 1,\n          scale: 1,\n          duration: 1,\n          ease: \"expo.inOut\",\n        });\n\n        const sectionTl = gsap.timeline({\n          scrollTrigger: {\n            trigger: section,\n            start: \"top 60%\",\n            end: \"bottom 60%\",\n            scrub: true,\n            // markers: true,\n            fastScrollEnd: 500,\n            preventOverlaps: \"how-it-works\",\n            onEnter: () => {\n              if (!isFirst) {\n                maskTl.play();\n              }\n            },\n            // onEnterBack: () => {\n            //   if (!isLast) {\n            //     maskTl.progress(1).reverse();\n            //   }\n            // },\n            // onLeave: () => {\n            //   if (!isLast) {\n            //     maskTl.seek(\"out\").play();\n            //   }\n            // },\n            onLeaveBack: () => {\n              if (!isFirst) {\n                maskTl.progress(1).reverse();\n              }\n            },\n          },\n        });\n      }\n    });\n  }\n\n  // Cleanup and reinitialize logic on breakpoint change\n  mm.add(\"*\", () => {\n    mm.revert(); // Clean up GSAP timelines and ScrollTriggers before reinitializing\n  });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  setHowItWorksSections();\n});\n"],"names":["document","addEventListener","mm","console","log","gsap","matchMedia","add","small","large","ctx","conditions","initializeSections","maskSelector","isMobile","howItWorksSections","querySelectorAll","howItWorksMask","querySelector","forEach","section","i","image","set","opacity","scale","maskTl","timeline","paused","to","duration","ease","scrollTrigger","trigger","start","end","once","onEnter","play","isFirst","length","scrub","fastScrollEnd","preventOverlaps","onLeaveBack","progress","reverse","revert"],"version":3,"file":"howItWorks.js.map"}