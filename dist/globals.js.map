{"mappings":"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","sources":["<anon>","src/globals.js","src/modules/setLoadingStates.js","src/modules/staggerHeading.js","src/modules/staggerText.js","src/modules/setLinesWrapper.js","src/modules/staggerElements.js","src/modules/menu.js"],"sourcesContent":["(() => {\nfunction $ce6a18b12420bce7$export$7fd17f34fe72f4b0() {\n    const loading = document.querySelector(\".loading-wrapper\");\n    if (!loading) return;\n    const logo = loading.querySelector(\".loading_logo\");\n    const logoCircle = logo.querySelector(\"circle\");\n    const logoPath = logo.querySelector(\"path\");\n    gsap.set(logoCircle, {\n        drawSVG: \"0 100% live\"\n    });\n    gsap.set(logoPath, {\n        drawSVG: \"0 100% live\"\n    });\n    gsap.to(logoCircle, {\n        drawSVG: \"100% 100% live\",\n        duration: 1,\n        ease: \"expo.out\"\n    });\n    gsap.to(logoPath, {\n        drawSVG: \"100% 100% live\",\n        duration: 1,\n        ease: \"expo.out\"\n    });\n    gsap.to(loading, {\n        maskPosition: \"100% 100%\",\n        duration: 1,\n        delay: 0.5,\n        ease: \"expo.out\",\n        onComplete: ()=>{\n            loading.style.display = \"none\";\n            gsap.set(logoCircle, {\n                drawSVG: \"0% 0% live\"\n            });\n            gsap.set(logoPath, {\n                drawSVG: \"0% 0% live\"\n            });\n            gsap.set(loading, {\n                maskPosition: \"0% 100%\"\n            });\n        }\n    });\n    // Loading animation\n    const links = document.querySelectorAll(\"a\");\n    links.forEach((l)=>{\n        l.addEventListener(\"click\", (e)=>{\n            // e.preventDefault();\n            const href = l.href;\n            const url = new URL(href);\n            if (window.location.origin === url.origin && window.location.pathname !== url.pathname && l.target !== \"_blank\") {\n                e.preventDefault();\n                loading.style.display = \"block\";\n                gsap.to(logoCircle, {\n                    drawSVG: \"0% 100% live\",\n                    duration: 0.5,\n                    delay: 0.5,\n                    ease: \"expo.out\"\n                });\n                gsap.to(logoPath, {\n                    drawSVG: \"0% 100% live\",\n                    duration: 0.5,\n                    delay: 0.5,\n                    ease: \"expo.out\"\n                });\n                gsap.to(loading, {\n                    maskPosition: \"50% 100%\",\n                    duration: 1,\n                    ease: \"expo.out\",\n                    onComplete: ()=>{\n                        window.location.href = href;\n                    }\n                });\n            // setTimeout(() => {\n            //   window.location.href = href;\n            // }, 500);\n            }\n        });\n    });\n}\n\n\n// Link timelines to scroll position\nfunction $719658c63b791dcb$export$48ba2fbf80d9a7d(el, triggerEl, start, end, delay, withScroll) {\n    const wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"reveal-heading_wrapper\");\n    el.parentNode.insertBefore(wrapper, el);\n    const transparent = el.cloneNode(true);\n    wrapper.appendChild(el);\n    wrapper.appendChild(transparent);\n    transparent.classList.add('transparent');\n    // transparent.removeAttribute('revealHeading');\n    gsap.set(el, {\n        opacity: 0\n    });\n    gsap.set(transparent, {\n        backgroundPositionX: \"0%\"\n    });\n    const trigger = {\n        trigger: triggerEl,\n        scrub: true,\n        once: true,\n        start: start,\n        fastScrollEnd: 500,\n        preventOverlaps: \"scroll-headings\"\n    };\n    if (!withScroll) {\n        const tl = gsap.timeline({\n            paused: true\n        });\n        trigger.onEnter = ()=>{\n            tl.to(transparent, {\n                backgroundPositionX: \"50%\",\n                delay: delay,\n                duration: 0.5,\n                overwrite: \"auto\",\n                ease: \"expo.out\",\n                onComplete: ()=>{\n                    gsap.set(el, {\n                        opacity: 1\n                    });\n                }\n            }).to(transparent, {\n                backgroundPositionX: \"100%\",\n                duration: 0.5,\n                overwrite: \"auto\",\n                ease: \"expo.out\",\n                onComplete: ()=>{\n                    transparent.remove();\n                }\n            });\n            tl.play();\n        };\n        gsap.timeline({\n            scrollTrigger: trigger\n        });\n    } else {\n        trigger.end = end;\n        gsap.timeline({\n            scrollTrigger: trigger\n        }).to(transparent, {\n            backgroundPositionX: \"50%\",\n            delay: delay,\n            duration: 0.3,\n            overwrite: \"auto\",\n            ease: \"expo.out\",\n            onComplete: ()=>{\n                gsap.set(el, {\n                    opacity: 1\n                });\n            }\n        }).to(transparent, {\n            backgroundPositionX: \"100%\",\n            duration: 0.3,\n            overwrite: \"auto\",\n            ease: \"expo.out\",\n            onComplete: ()=>{\n                transparent.remove();\n            }\n        });\n    }\n}\nfunction $719658c63b791dcb$export$f8b3d1cda34ef9a8() {\n    const blocks = document.querySelectorAll(\"[reveal-heading]\");\n    blocks.forEach((el)=>{\n        el.classList.add('init');\n        const startVal = el.dataset.startPos || \"center bottom\", endVal = el.dataset.endPos || \"bottom center\", delay = el.dataset.delay || 0.2, withScrollTrigger = el.dataset.withScroll || false;\n        $719658c63b791dcb$export$48ba2fbf80d9a7d(el, el, startVal, endVal, delay, withScrollTrigger);\n    });\n}\n\n\nfunction $1c7845f0e1de0887$export$8f060496e19d4bbb(lines, callback) {\n    // Wrap each line in a .line-wrapper span\n    lines.forEach((line)=>{\n        const wrapper = document.createElement('span');\n        wrapper.classList.add('line-wrapper');\n        line.parentNode.insertBefore(wrapper, line);\n        wrapper.appendChild(line);\n    });\n    if (typeof callback === 'function') callback();\n}\n\n\n// Link timelines to scroll position\nfunction $1aa2e0393d0f1beb$var$createScrollTrigger(triggerElement, elements, start, end, stagger, delay, withScroll) {\n    const trigger = {\n        trigger: triggerElement,\n        scrub: true,\n        start: start,\n        fastScrollEnd: 500,\n        preventOverlaps: \"scroll-text\"\n    };\n    if (!withScroll) {\n        trigger.onEnter = ()=>{\n            gsap.to(elements, {\n                yPercent: 0,\n                stagger: stagger,\n                ease: \"power4.out\",\n                delay: Number(delay)\n            });\n        };\n        gsap.timeline({\n            scrollTrigger: trigger\n        });\n    } else {\n        trigger.end = end;\n        gsap.timeline({\n            scrollTrigger: trigger\n        }).to(words, {\n            yPercent: 0,\n            stagger: stagger,\n            ease: \"none\"\n        });\n    }\n}\nfunction $1aa2e0393d0f1beb$export$1601281ad392a6d8() {\n    // Split all words on the brand core section\n    const textEls = document.querySelectorAll('[stagger-text]');\n    textEls.forEach((el)=>{\n        if (el.classList.contains('w-richtext')) {\n            const staggerTextEls = new SplitType(el.querySelectorAll('p, li, h2, h3'), {\n                types: \"lines\",\n                tagName: \"span\"\n            });\n            (0, $1c7845f0e1de0887$export$8f060496e19d4bbb)(staggerTextEls.lines, ()=>{\n                gsap.set(staggerTextEls.lines, {\n                    yPercent: 100\n                });\n            });\n        } else {\n            const staggerTextEls = new SplitType(el, {\n                types: \"lines\",\n                tagName: \"span\"\n            });\n            (0, $1c7845f0e1de0887$export$8f060496e19d4bbb)(staggerTextEls.lines, ()=>{\n                gsap.set(staggerTextEls.lines, {\n                    yPercent: 100\n                });\n            });\n        }\n    });\n    const textBlocks = document.querySelectorAll(\"[stagger-text]\");\n    textBlocks.forEach((el)=>{\n        el.classList.add(\"init\");\n        const words1 = el.querySelectorAll(\".line\"), startVal = el.dataset.startPos || \"center bottom\", endVal = el.dataset.endPos || \"bottom center\", stagger = el.dataset.stagger || 0.05, delay = el.dataset.delay || 0, withScrollTrigger = el.dataset.withScroll || false;\n        // let tl = gsap.timeline({ paused: true });\n        $1aa2e0393d0f1beb$var$createScrollTrigger(el, words1, startVal, endVal, stagger, delay, withScrollTrigger);\n    });\n}\n\n\n// Link timelines to scroll position\nfunction $4013e65a83b1b778$var$createScrollList(triggerElement, elements, start, stagger, delay) {\n    gsap.set(elements, {\n        yPercent: 100,\n        opacity: 0\n    });\n    gsap.timeline({\n        scrollTrigger: {\n            trigger: triggerElement,\n            scrub: true,\n            start: start,\n            onEnter: ()=>{\n                gsap.to(elements, {\n                    yPercent: 0,\n                    opacity: 1,\n                    stagger: stagger,\n                    ease: \"power4.out\",\n                    delay: Number(delay)\n                });\n            }\n        }\n    });\n}\nfunction $4013e65a83b1b778$export$9b05384e3b3cbff1() {\n    const list = document.querySelectorAll(\"[stagger-list]\");\n    console.log(list);\n    if (!list) return;\n    list.forEach((el)=>{\n        const elements = el.querySelectorAll(\"[stagger-el]\"), startVal = el.dataset.startPos || \"top bottom\", stagger = el.dataset.stagger || 0.05, delay = el.dataset.delay || 0;\n        if (!elements) return;\n        $4013e65a83b1b778$var$createScrollList(el, elements, startVal, stagger, delay);\n    });\n}\n\n\nfunction $ee20a49b40292314$export$22ea07d0c2ddb570() {\n    // apply a \".is-active\" class to the \".navbar_component\" element if the user has scrolled past the top of the page,\n    // otherwise remove the \".is-active\" class. Also, apply a \".is-active\" class to the \".navbar_component\" element if the user\n    // clicks on any elements with the \".navbar_link.is-dropdown\" class, otherwise remove the \".is-active\" class.\n    const navbar = document.querySelector(\".navbar_component\");\n    const dropdowns = document.querySelectorAll(\".navbar_link.is-dropdown\");\n    let isScrolling = false;\n    window.addEventListener(\"scroll\", ()=>{\n        if (!isScrolling) window.requestAnimationFrame(()=>{\n            isDropdownOpen();\n            isScrolling = false;\n        });\n        isScrolling = true;\n    });\n    isDropdownOpen();\n    let currentDropdown = null;\n    // checks if there's any dropdown open, and if so, keeps the navbar active. Otherwise, removes the active class\n    function isDropdownOpen() {\n        const isOpen = Array.from(dropdowns).some((dropdown)=>dropdown.classList.contains(\"is-active\"));\n        if (!isOpen && window.scrollY === 0) navbar.classList.remove(\"is-active\");\n        else navbar.classList.add(\"is-active\");\n    }\n    const dropdownsTimelines = [];\n    dropdowns.forEach((dropdown, i)=>{\n        const submenu = dropdown.nextElementSibling;\n        if (!submenu) return;\n        // create a timeline for each submenu. Execute the isDropdownOpen function if the submenu timeline is reversed, once it's completed.\n        const submenuTl = gsap.timeline({\n            paused: true,\n            onStart: isDropdownOpen,\n            onReverseComplete: isDropdownOpen\n        });\n        submenuTl.fromTo(submenu, {\n            height: 0\n        }, {\n            height: \"auto\",\n            duration: 0.5,\n            ease: \"expo.inOut\"\n        });\n        if (submenu.querySelector(\".big-links_list\")) submenuTl.from(submenu.querySelectorAll(\".big-links_list a\"), {\n            yPercent: 10,\n            opacity: 0,\n            duration: 0.2,\n            stagger: 0.1\n        }, 0);\n        dropdownsTimelines.push(submenuTl);\n        // closes all submenus (playing their respective timelines) and opens the submenu that was clicked\n        function toggleSubmenu() {\n            if (currentDropdown && currentDropdown !== dropdown) {\n                dropdownsTimelines.forEach((timeline)=>timeline.reverse());\n                currentDropdown.classList.remove(\"is-active\");\n            }\n            if (submenuTl.progress() === 1) submenuTl.reverse();\n            else submenuTl.play();\n            if (currentDropdown === dropdown) {\n                currentDropdown.classList.remove(\"is-active\");\n                currentDropdown = null;\n            } else {\n                currentDropdown = dropdown;\n                currentDropdown.classList.add(\"is-active\");\n            }\n        }\n        dropdown.addEventListener(\"click\", toggleSubmenu);\n    });\n    // close the submenu if the user clicks outside of the navbar\n    document.addEventListener(\"click\", (e)=>{\n        if (!navbar.contains(e.target)) {\n            dropdownsTimelines.forEach((timeline)=>timeline.reverse());\n            currentDropdown?.classList.remove(\"is-active\");\n            currentDropdown = null;\n        }\n    });\n}\n\n\n// import { setImageMasks } from \"./modules/setImageMasks\";\n// import { initFormSubmit } from \"./modules/formSubmit\";\n// import { initContactForm } from \"./modules/contactForm\";\n// import { setVideosModal } from \"./modules/videoModal\";\n// wait until DOM is ready (html and svg markup)\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    (0, $ee20a49b40292314$export$22ea07d0c2ddb570)();\n    // initButtonStates();\n    // playVideoOnScroll();\n    // setImageMasks();\n    (0, $4013e65a83b1b778$export$9b05384e3b3cbff1)();\n// initFormSubmit();\n// initContactForm();\n// setVideosModal();\n});\ndocument.fonts.ready.then(()=>{\n    (0, $1aa2e0393d0f1beb$export$1601281ad392a6d8)();\n    (0, $719658c63b791dcb$export$f8b3d1cda34ef9a8)();\n    (0, $ce6a18b12420bce7$export$7fd17f34fe72f4b0)();\n});\n\n})();\n//# sourceMappingURL=globals.js.map\n","import { setLoadingStates } from \"./modules/setLoadingStates\";\nimport { setRevealHeading } from \"./modules/staggerHeading\";\nimport { setStaggerText } from \"./modules/staggerText\";\nimport { setStaggerElements } from \"./modules/staggerElements\";\n// import { initButtonStates } from \"./modules/buttonStates\";\n// import { playVideoOnScroll, setTransparentVideo } from \"./modules/playVideoOnScroll\";\nimport { initMenu } from \"./modules/menu\";\n// import { setImageMasks } from \"./modules/setImageMasks\";\n// import { initFormSubmit } from \"./modules/formSubmit\";\n// import { initContactForm } from \"./modules/contactForm\";\n// import { setVideosModal } from \"./modules/videoModal\";\n\n// wait until DOM is ready (html and svg markup)\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  initMenu();\n  // initButtonStates();\n  // playVideoOnScroll();\n  // setImageMasks();\n  setStaggerElements();\n  // initFormSubmit();\n  // initContactForm();\n  // setVideosModal();\n});\n\ndocument.fonts.ready.then(() => {\n  setStaggerText();\n  setRevealHeading();\n  setLoadingStates();\n});\n","export function setLoadingStates() {\n  const loading = document.querySelector(\".loading-wrapper\");\n  if (!loading) {\n    return;\n  }\n\n  const logo = loading.querySelector(\".loading_logo\");\n  const logoCircle = logo.querySelector(\"circle\");\n  const logoPath = logo.querySelector(\"path\");\n\n  gsap.set(logoCircle, { drawSVG: \"0 100% live\" });\n  gsap.set(logoPath, { drawSVG: \"0 100% live\" });\n\n  gsap.to(logoCircle, {\n    drawSVG: \"100% 100% live\",\n    duration: 1,\n    ease: \"expo.out\",\n  });\n  gsap.to(logoPath, {\n    drawSVG: \"100% 100% live\",\n    duration: 1,\n    ease: \"expo.out\",\n  });\n  gsap.to(loading, {\n    maskPosition: \"100% 100%\",\n    duration: 1,\n    delay: 0.5,\n    ease: \"expo.out\",\n    onComplete: () => {\n      loading.style.display = \"none\";\n      gsap.set(logoCircle, { drawSVG: \"0% 0% live\" });\n      gsap.set(logoPath, { drawSVG: \"0% 0% live\" });\n      gsap.set(loading, { maskPosition: \"0% 100%\" });\n    },\n  });\n\n  // Loading animation\n  const links = document.querySelectorAll(\"a\");\n  links.forEach((l) => {\n    l.addEventListener(\"click\", (e) => {\n      // e.preventDefault();\n      const href = l.href;\n      const url = new URL(href);\n\n      if (\n        window.location.origin === url.origin &&\n        window.location.pathname !== url.pathname &&\n        l.target !== \"_blank\"\n      ) {\n        e.preventDefault();\n\n        loading.style.display = \"block\";\n        gsap.to(logoCircle, {\n          drawSVG: \"0% 100% live\",\n          duration: 0.5,\n          delay: 0.5,\n          ease: \"expo.out\",\n        });\n        gsap.to(logoPath, {\n          drawSVG: \"0% 100% live\",\n          duration: 0.5,\n          delay: 0.5,\n          ease: \"expo.out\",\n        });\n        gsap.to(loading, {\n          maskPosition: \"50% 100%\",\n          duration: 1,\n          ease: \"expo.out\",\n          onComplete: () => {\n            window.location.href = href;\n          },\n        });\n\n        // setTimeout(() => {\n        //   window.location.href = href;\n        // }, 500);\n      }\n    });\n  });\n}\n","// Link timelines to scroll position\nexport function createScrollTrigger(el, triggerEl, start, end, delay, withScroll) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.classList.add(\"reveal-heading_wrapper\");\n  el.parentNode.insertBefore(wrapper, el);\n  const transparent = el.cloneNode(true);\n  wrapper.appendChild(el);\n  wrapper.appendChild(transparent);\n  transparent.classList.add('transparent');\n  // transparent.removeAttribute('revealHeading');\n\n  gsap.set(el, { opacity: 0 });\n  gsap.set(transparent, { backgroundPositionX: \"0%\" });\n\n  const trigger = {\n    trigger: triggerEl,\n    scrub: true,\n    once: true,\n    start,\n    fastScrollEnd: 500,\n    preventOverlaps: \"scroll-headings\",\n  };\n\n  if (!withScroll) {\n    const tl = gsap.timeline({ paused: true });\n\n    trigger.onEnter = () => {\n      tl\n      .to(transparent, {\n        backgroundPositionX: \"50%\",\n        delay,\n        duration: 0.5,\n        overwrite: \"auto\",\n        ease: \"expo.out\",\n        onComplete: () => {\n          gsap.set(el,{ opacity: 1 })\n        }\n      })\n        .to(transparent, {\n          backgroundPositionX: \"100%\",\n          duration: 0.5,\n          overwrite: \"auto\",\n          ease: \"expo.out\",\n          onComplete: () => {\n            transparent.remove();\n          },\n        });\n\n      tl.play();\n    };\n\n    gsap.timeline({ scrollTrigger: trigger });\n  } else {\n    trigger.end = end;\n    gsap\n      .timeline({\n        scrollTrigger: trigger,\n      })\n      .to(transparent, {\n        backgroundPositionX: \"50%\",\n        delay,\n        duration: 0.3,\n        overwrite: \"auto\",\n        ease: \"expo.out\",\n        onComplete: () => {\n          gsap.set(el, { opacity: 1 });\n        },\n      })\n      .to(transparent, {\n        backgroundPositionX: \"100%\",\n        duration: 0.3,\n        overwrite: \"auto\",\n        ease: \"expo.out\",\n        onComplete: () => {\n          transparent.remove();\n        },\n      });\n  }\n}\n\nexport function setRevealHeading() {\n  const blocks = document.querySelectorAll(\"[reveal-heading]\");\n\n  blocks.forEach((el) => {\n    el.classList.add('init');\n    const startVal = el.dataset.startPos || \"center bottom\",\n      endVal = el.dataset.endPos || \"bottom center\",\n      delay = el.dataset.delay || 0.2,\n      withScrollTrigger = el.dataset.withScroll || false;\n    createScrollTrigger(el, el, startVal, endVal, delay, withScrollTrigger);\n  });\n}\n","import { setLinesWrapper } from \"./setLinesWrapper\";\n\n// Link timelines to scroll position\nfunction createScrollTrigger(triggerElement, elements, start, end, stagger, delay, withScroll) {\n  const trigger = {\n    trigger: triggerElement,\n    scrub: true,\n    start,\n    fastScrollEnd: 500,\n    preventOverlaps: \"scroll-text\",\n  };\n\n  if (!withScroll) {\n    trigger.onEnter = () => {\n      gsap.to(elements, {\n        yPercent: 0,\n        stagger: stagger,\n        ease: \"power4.out\",\n        delay: Number(delay),\n      });\n    };\n\n    gsap.timeline({ scrollTrigger: trigger });\n  } else {\n    trigger.end = end;\n    gsap\n      .timeline({\n        scrollTrigger: trigger,\n      })\n      .to(words, {\n        yPercent: 0,\n        stagger: stagger,\n        ease: \"none\",\n      });\n  }\n}\n\nexport function setStaggerText() {\n  // Split all words on the brand core section\n  const textEls = document.querySelectorAll('[stagger-text]');\n\n  textEls.forEach((el) => {\n    if (el.classList.contains('w-richtext')) {\n      const staggerTextEls = new SplitType(el.querySelectorAll('p, li, h2, h3'), {\n        types: \"lines\",\n        tagName: \"span\",\n      });\n      setLinesWrapper(staggerTextEls.lines, () => {\n        gsap.set(staggerTextEls.lines, { yPercent: 100 });\n      });\n    } else {\n      const staggerTextEls = new SplitType(el, {\n        types: \"lines\",\n        tagName: \"span\",\n      });\n      setLinesWrapper(staggerTextEls.lines, () => {\n        gsap.set(staggerTextEls.lines, { yPercent: 100 });\n      });\n    }\n  })\n\n  const textBlocks = document.querySelectorAll(\"[stagger-text]\");\n\n  textBlocks.forEach((el) => {\n    el.classList.add(\"init\");\n    const words = el.querySelectorAll(\".line\"),\n      startVal = el.dataset.startPos || \"center bottom\",\n      endVal = el.dataset.endPos || \"bottom center\",\n      stagger = el.dataset.stagger || 0.05,\n      delay = el.dataset.delay || 0,\n      withScrollTrigger = el.dataset.withScroll || false;\n    // let tl = gsap.timeline({ paused: true });\n    createScrollTrigger(el, words, startVal, endVal, stagger, delay, withScrollTrigger);\n  });\n}\n","export function setLinesWrapper(lines, callback) {\n  // Wrap each line in a .line-wrapper span\n  lines.forEach(line => {\n    const wrapper = document.createElement('span');\n    wrapper.classList.add('line-wrapper');\n    line.parentNode.insertBefore(wrapper, line);\n    wrapper.appendChild(line);\n  });\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n}","// Link timelines to scroll position\nfunction createScrollList(\n  triggerElement,\n  elements,\n  start,\n  stagger,\n  delay,\n) {\n  gsap.set(elements, {\n    yPercent: 100,\n    opacity: 0,\n  })\n\n  gsap.timeline({\n    scrollTrigger: {\n      trigger: triggerElement,\n      scrub: true,\n      start,\n      onEnter: () => {\n        gsap.to(elements, {\n          yPercent: 0,\n          opacity: 1,\n          stagger,\n          ease: \"power4.out\",\n          delay: Number(delay),\n        });\n      },\n    },\n  });\n}\n\nexport function setStaggerElements() {\n  const list = document.querySelectorAll(\"[stagger-list]\");\n\n  console.log(list);\n\n  if (!list) {\n    return;\n  }\n\n  list.forEach((el) => {\n    const elements = el.querySelectorAll(\"[stagger-el]\"),\n      startVal = el.dataset.startPos || \"top bottom\",\n      stagger = el.dataset.stagger || 0.05,\n      delay = el.dataset.delay || 0;\n    \n    if (!elements) {\n      return;\n    }\n    \n    createScrollList(el, elements, startVal, stagger, delay);\n  });\n}\n","export function initMenu() {\n  // apply a \".is-active\" class to the \".navbar_component\" element if the user has scrolled past the top of the page,\n  // otherwise remove the \".is-active\" class. Also, apply a \".is-active\" class to the \".navbar_component\" element if the user\n  // clicks on any elements with the \".navbar_link.is-dropdown\" class, otherwise remove the \".is-active\" class.\n  const navbar = document.querySelector(\".navbar_component\");\n  const dropdowns = document.querySelectorAll(\".navbar_link.is-dropdown\");\n  let isScrolling = false;\n\n  window.addEventListener(\"scroll\", () => {\n    if (!isScrolling) {\n      window.requestAnimationFrame(() => {\n        isDropdownOpen();\n        isScrolling = false;\n      });\n    }\n    isScrolling = true;\n  });\n\n  isDropdownOpen();\n\n  let currentDropdown = null;\n\n  // checks if there's any dropdown open, and if so, keeps the navbar active. Otherwise, removes the active class\n  function isDropdownOpen() {\n    const isOpen = Array.from(dropdowns).some((dropdown) =>\n      dropdown.classList.contains(\"is-active\")\n    );\n\n    if (!isOpen && window.scrollY === 0) {\n      navbar.classList.remove(\"is-active\");\n    } else {\n      navbar.classList.add(\"is-active\");\n    }\n  }\n\n  const dropdownsTimelines = [];\n\n  dropdowns.forEach((dropdown, i) => {\n    const submenu = dropdown.nextElementSibling;\n\n    if (!submenu) {\n      return;\n    }\n\n    // create a timeline for each submenu. Execute the isDropdownOpen function if the submenu timeline is reversed, once it's completed.\n    const submenuTl = gsap.timeline({\n      paused: true,\n      onStart: isDropdownOpen,\n      onReverseComplete: isDropdownOpen,\n    });\n\n    submenuTl.fromTo(\n      submenu,\n      { height: 0 },\n      { height: \"auto\", duration: 0.5, ease: \"expo.inOut\" }\n    );\n\n    if (submenu.querySelector(\".big-links_list\")) {\n      submenuTl.from(\n        submenu.querySelectorAll(\".big-links_list a\"),\n        { yPercent: 10, opacity: 0, duration: 0.2, stagger: 0.1 },\n        0\n      );\n    }\n\n    dropdownsTimelines.push(submenuTl);\n\n    // closes all submenus (playing their respective timelines) and opens the submenu that was clicked\n    function toggleSubmenu() {\n      if (currentDropdown && currentDropdown !== dropdown) {\n        dropdownsTimelines.forEach((timeline) => timeline.reverse());\n        currentDropdown.classList.remove(\"is-active\");\n      }\n\n      if (submenuTl.progress() === 1) {\n        submenuTl.reverse();\n      } else {\n        submenuTl.play();\n      }\n\n      if (currentDropdown === dropdown) {\n        currentDropdown.classList.remove(\"is-active\");\n        currentDropdown = null;\n      } else {\n        currentDropdown = dropdown;\n        currentDropdown.classList.add(\"is-active\");\n      }\n    }\n\n    dropdown.addEventListener(\"click\", toggleSubmenu);\n  });\n\n  // close the submenu if the user clicks outside of the navbar\n  document.addEventListener(\"click\", (e) => {\n    if (!navbar.contains(e.target)) {\n      dropdownsTimelines.forEach((timeline) => timeline.reverse());\n      currentDropdown?.classList.remove(\"is-active\");\n      currentDropdown = null;\n    }\n  });\n}"],"names":["$1c7845f0e1de0887$export$8f060496e19d4bbb","lines","callback","forEach","line","wrapper","document","createElement","classList","add","parentNode","insertBefore","appendChild","addEventListener","navbar","querySelector","dropdowns","querySelectorAll","isScrolling","window","requestAnimationFrame","isDropdownOpen","currentDropdown","Array","from","some","dropdown","contains","scrollY","remove","dropdownsTimelines","i","submenu","nextElementSibling","submenuTl","gsap","timeline","paused","onStart","onReverseComplete","fromTo","height","duration","ease","yPercent","opacity","stagger","push","reverse","progress","play","e","target","list","console","log","el","elements","startVal","dataset","startPos","delay","set","scrollTrigger","trigger","scrub","start","onEnter","to","Number","fonts","ready","then","textEls","staggerTextEls","SplitType","types","tagName","textBlocks","words1","endVal","endPos","withScrollTrigger","withScroll","$1aa2e0393d0f1beb$var$createScrollTrigger","triggerElement","end","fastScrollEnd","preventOverlaps","words","blocks","$719658c63b791dcb$export$48ba2fbf80d9a7d","triggerEl","transparent","cloneNode","backgroundPositionX","once","overwrite","onComplete","tl","loading","logo","logoCircle","logoPath","drawSVG","maskPosition","style","display","links","l","href","url","URL","location","origin","pathname","preventDefault"],"version":3,"file":"globals.js.map"}